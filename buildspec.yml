# version: 0.2

# phases:
#   install:
#     runtime-versions:
#       nodejs: 16
   
#     commands:
#         # install npm
#         - npm install
       
#   build:
#     commands:
#         # run build script
#         - npm run-script build
     
# artifacts:
#   # include all files required to run application
#   # notably excluded is node_modules, as this will cause overwrite error on deploy
#   files:
#     - public/**/*
#     - src/**/*
#     - package.json
#     - server.js
#     - appspec.yml
#     - scripts/**/*


# version: 0.2

# phases:
#   install:
#     runtime-versions:
#       nodejs: 16
#     commands:
#       - echo Installing dependencies...
#       - npm install

#   build:
#     commands:
#       - echo Building React frontend...
#       - npm run build

# artifacts:
#   files:
#     - build/**/*
#     - server.js
#     - package.json
#     - appspec.yml
#     - scripts/deploy.sh

version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - export REPOSITORY_URI=418295711710.dkr.ecr.ap-south-1.amazonaws.com/my-project-image
      - export IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo $IMAGE_TAG
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing Docker images...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo Writing image definition file...
      - printf '[{"name":"my-app","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files:
    - appspec.yml
    - scripts/deploy.sh
    - imagedefinitions.json